import React, { useState, useEffect } from "react";
import foods from "../data/menu.json"; // Th·ª±c ƒë∆°n t·ª´ file JSON
import LoginPage from "./LoginPage"; // Import the login page

const OrderPage = () => {
  const [cart, setCart] = useState([]); // Gi·ªè h√†ng
  const [totalPrice, setTotalPrice] = useState(0); // T·ªïng gi√° tr·ªã gi·ªè h√†ng
  const [paymentMethod, setPaymentMethod] = useState("cash"); // Ph∆∞∆°ng th·ª©c thanh to√°n
  const [newFoodName, setNewFoodName] = useState(""); // T√™n m√≥n ƒÉn ngo√†i menu
  const [newFoodPrice, setNewFoodPrice] = useState(""); // Gi√° m√≥n ƒÉn ngo√†i menu
  const [showScrollButton, setShowScrollButton] = useState(false); // Hi·ªÉn th·ªã n√∫t cu·ªôn l√™n ƒë·∫ßu
  const [loggedIn, setLoggedIn] = useState(false); // Track login status
  const cartRef = React.createRef(); // Reference to the cart section

  // Check if user is logged in (read from localStorage)
  useEffect(() => {
    const isLoggedIn = localStorage.getItem("loggedIn") === "true";
    setLoggedIn(isLoggedIn);
  }, []);

  // H√†m x·ª≠ l√Ω ƒëƒÉng nh·∫≠p th√†nh c√¥ng
  const handleLogin = () => {
    setLoggedIn(true);
  };

  // Nh√≥m m√≥n ƒÉn theo category
  const groupedFoods = foods.reduce((acc, food) => {
    if (!acc[food.category]) acc[food.category] = [];
    acc[food.category].push(food);
    return acc;
  }, {});

  // T√≠nh t·ªïng gi√° tr·ªã gi·ªè h√†ng m·ªói khi gi·ªè h√†ng thay ƒë·ªïi
  useEffect(() => {
    const total = cart.reduce(
      (sum, item) => sum + item.price * item.quantity,
      0
    );
    setTotalPrice(total); // C·∫≠p nh·∫≠t t·ªïng gi√° tr·ªã gi·ªè h√†ng
  }, [cart]);

  // T√≠nh t·ªïng s·ªë l∆∞·ª£ng m√≥n ƒÉn trong gi·ªè h√†ng
  const totalItemsInCart = cart.reduce((sum, item) => sum + item.quantity, 0);

  // Hi·ªÉn th·ªã n√∫t cu·ªôn l√™n ƒë·∫ßu khi cu·ªôn xu·ªëng qu√° m·ªôt m·ª©c n√†o ƒë√≥
  useEffect(() => {
    const handleScroll = () => {
      if (window.pageYOffset > 300) {
        setShowScrollButton(true);
      } else {
        setShowScrollButton(false);
      }
    };
    window.addEventListener("scroll", handleScroll);
    return () => window.removeEventListener("scroll", handleScroll);
  }, []);

  // H√†m th√™m m√≥n ƒÉn c√≥ s·∫µn trong menu v√†o gi·ªè h√†ng (s·ªë l∆∞·ª£ng m·∫∑c ƒë·ªãnh l√† 1)
  const handleAddToCart = (food) => {
    const existingFood = cart.find((item) => item.id === food.id);
    if (existingFood) {
      const updatedCart = cart.map((item) =>
        item.id === food.id ? { ...item, quantity: item.quantity + 1 } : item
      );
      setCart(updatedCart);
    } else {
      setCart([...cart, { ...food, quantity: 1 }]); // Th√™m m√≥n v·ªõi s·ªë l∆∞·ª£ng m·∫∑c ƒë·ªãnh l√† 1
    }
  };

  // H√†m th√™m m√≥n ƒÉn ngo√†i menu v√†o gi·ªè h√†ng
  const handleAddNewFoodToCart = () => {
    if (!newFoodName || newFoodPrice <= 0) {
      alert("Vui l√≤ng nh·∫≠p t√™n m√≥n ƒÉn v√† gi√° h·ª£p l·ªá.");
      return;
    }

    const newFood = {
      id: Date.now(), // Unique ID for new food item
      name: newFoodName,
      price: Number(newFoodPrice),
      quantity: 1, // S·ªë l∆∞·ª£ng m·∫∑c ƒë·ªãnh l√† 1
    };
    setCart([...cart, newFood]);

    // Reset input fields
    setNewFoodName("");
    setNewFoodPrice("");
  };

  // H√†m tƒÉng s·ªë l∆∞·ª£ng m√≥n ƒÉn
  const increaseQuantity = (id) => {
    const updatedCart = cart.map((item) =>
      item.id === id ? { ...item, quantity: item.quantity + 1 } : item
    );
    setCart(updatedCart);
  };

  // H√†m gi·∫£m s·ªë l∆∞·ª£ng m√≥n ƒÉn
  const decreaseQuantity = (id) => {
    const updatedCart = cart.map((item) =>
      item.id === id && item.quantity > 1
        ? { ...item, quantity: item.quantity - 1 }
        : item
    );
    setCart(updatedCart);
  };

  // H√†m x√≥a m√≥n ƒÉn kh·ªèi gi·ªè h√†ng
  const removeItemFromCart = (id) => {
    const updatedCart = cart.filter((item) => item.id !== id);
    setCart(updatedCart);
  };

  // H√†m x·ª≠ l√Ω thanh to√°n
  const handleCheckout = () => {
    if (cart.length === 0) {
      alert("Gi·ªè h√†ng c·ªßa b·∫°n ƒëang tr·ªëng!");
      return;
    }

    const order = {
      items: cart,
      total: totalPrice,
      paymentMethod: paymentMethod,
      date: new Date().toISOString(),
    };

    // G·ª≠i y√™u c·∫ßu thanh to√°n (POST) ƒë·∫øn server
    fetch(`https://coutnhatrang-api.vercel.app/api/orders`, {
      method: "POST",
      headers: {
        "Content-Type": "application/json",
      },
      body: JSON.stringify(order), // G·ª≠i gi·ªè h√†ng v√† t·ªïng gi√° tr·ªã
    })
      .then((response) => {
        if (!response.ok) {
          throw new Error("L·ªói khi thanh to√°n");
        }
        return response.json();
      })
      .then((data) => {
        alert("Thanh to√°n th√†nh c√¥ng!");
        setCart([]); // Reset gi·ªè h√†ng sau khi thanh to√°n
      })
      .catch((error) => {
        console.error("L·ªói khi thanh to√°n:", error);
      });
  };

  // H√†m cu·ªôn l√™n ƒë·∫ßu trang
  const scrollToTop = () => {
    window.scrollTo({ top: 0, behavior: "smooth" });
  };

  // H√†m cu·ªôn xu·ªëng gi·ªè h√†ng
  const scrollToCart = () => {
    cartRef.current.scrollIntoView({ behavior: "smooth" });
  };

  // N·∫øu ng∆∞·ªùi d√πng ch∆∞a ƒëƒÉng nh·∫≠p, hi·ªÉn th·ªã trang ƒëƒÉng nh·∫≠p
  if (!loggedIn) {
    return <LoginPage onLogin={handleLogin} />;
  }

  return (
    <div className="p-4">
      <h1 className="text-2xl font-bold mb-4">Order ƒë·ªì ƒÉn</h1>

      {/* Hi·ªÉn th·ªã m√≥n ƒÉn theo danh m·ª•c */}
      {Object.keys(groupedFoods).map((category) => (
        <div key={category} className="mb-8">
          <h2 className="text-xl font-bold mb-4">{category}</h2>
          <div className="grid grid-cols-1 gap-4 mb-4">
            {groupedFoods[category].map((food) => (
              <div
                key={food.id}
                className="flex items-center justify-between p-4 border rounded"
              >
                <div className="flex flex-col">
                  <span className="font-medium">{food.name}</span>
                  <span>{food.price.toLocaleString()} ƒë</span>
                </div>
                <button
                  className="bg-green-500 text-white px-4 py-2 rounded"
                  onClick={() => handleAddToCart(food)}
                >
                  Th√™m v√†o gi·ªè
                </button>
              </div>
            ))}
          </div>
        </div>
      ))}

      {/* Th√™m m√≥n ƒÉn ngo√†i menu */}
      <div className="mb-4">
        <h3 className="text-xl mb-2">Th√™m m√≥n ƒÉn ngo√†i menu</h3>
        <input
          type="text"
          value={newFoodName}
          onChange={(e) => setNewFoodName(e.target.value)}
          placeholder="T√™n m√≥n ƒÉn"
          className="border p-2 mr-2"
        />
        <input
          type="number"
          value={newFoodPrice}
          onChange={(e) => setNewFoodPrice(e.target.value)}
          placeholder="Gi√° m√≥n ƒÉn"
          className="border p-2 mr-2"
        />
        <button
          onClick={handleAddNewFoodToCart}
          className="bg-green-500 text-white px-4 py-2 rounded"
        >
          Th√™m nhanh
        </button>
      </div>

      {/* Gi·ªè h√†ng */}
      <div className="mt-4" ref={cartRef}>
        <h2 className="text-xl mb-2">Gi·ªè h√†ng</h2>
        {cart.length === 0 ? (
          <p>Gi·ªè h√†ng tr·ªëng.</p>
        ) : (
          <ul>
            {cart.map((item, index) => (
              <li key={index} className="mb-2">
                <span>
                  {item.name}: {item.price.toLocaleString()} ƒë x {item.quantity}
                </span>
                <div className="flex items-center mt-2">
                  <button
                    className="bg-red-500 text-white px-2 py-1 mr-2"
                    onClick={() => decreaseQuantity(item.id)}
                  >
                    ‚Äì
                  </button>
                  <button
                    className="bg-green-500 text-white px-2 py-1 mr-2"
                    onClick={() => increaseQuantity(item.id)}
                  >
                    +
                  </button>
                  <button
                    className="bg-gray-500 text-white px-2 py-1"
                    onClick={() => removeItemFromCart(item.id)}
                  >
                    X√≥a
                  </button>
                </div>
              </li>
            ))}
          </ul>
        )}

        {/* Hi·ªÉn th·ªã t·ªïng thanh to√°n */}
        <div className="mt-4">
          <h3 className="text-xl">
            T·ªïng c·ªông: {totalPrice.toLocaleString()} ƒë
          </h3>
        </div>
      </div>

      {/* Thanh to√°n */}
      <div className="mt-4">
        <h2 className="text-xl mb-2">Thanh to√°n</h2>
        <label>Ph∆∞∆°ng th·ª©c thanh to√°n:</label>
        <select
          value={paymentMethod}
          onChange={(e) => setPaymentMethod(e.target.value)}
          className="border p-2 mb-4"
        >
          <option value="cash">Ti·ªÅn m·∫∑t</option>
          <option value="bank">Chuy·ªÉn kho·∫£n</option>
        </select>

        <h3 className="text-xl mb-2">
          T·ªïng ti·ªÅn: {totalPrice.toLocaleString()} ƒë
        </h3>

        <button
          className="bg-blue-500 text-white px-4 py-2 rounded"
          onClick={handleCheckout}
        >
          X√°c nh·∫≠n thanh to√°n
        </button>
      </div>

      {/* N√∫t cu·ªôn l√™n ƒë·∫ßu v√† gi·ªè h√†ng */}
      <div className="fixed bottom-4 right-4 flex flex-col space-y-4">
        {showScrollButton && (
          <button
            onClick={scrollToTop}
            className="bg-blue-500 text-white px-4 py-2 rounded-full shadow-lg"
          >
            ü°Ö
          </button>
        )}

        {/* N√∫t gi·ªè h√†ng */}
        {cart.length > 0 && (
          <div className="relative">
            <button
              onClick={scrollToCart}
              className="bg-white text-white px-4 py-2 rounded-full shadow-lg"
            >
              üõí
            </button>
            <span className="absolute top-0 right-0 bg-red-500 text-white rounded-full w-6 h-6 flex items-center justify-center">
              {totalItemsInCart}
            </span>
          </div>
        )}
      </div>
    </div>
  );
};

export default OrderPage;
